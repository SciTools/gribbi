language: minimal
dist: xenial

env:
  matrix:
    - PYTHON_VERSION=36 LIMIT_TO_RELEASED_IRIS=false
    - PYTHON_VERSION=36 LIMIT_TO_RELEASED_IRIS=true
    - PYTHON_VERSION=37 LIMIT_TO_RELEASED_IRIS=false
    - PYTHON_VERSION=37 LIMIT_TO_RELEASED_IRIS=true

install:
  - >
    echo "==== STARTING TRAVIS.TML ====";
    echo "   path \$HOME=$HOME";
    echo "   path cwd=$(pwd)";
    echo "";

  - set -x;

  # Download iris-test-data
  # -----------------------------------
  - >
    export IRIS_TEST_DATA_REF="https://github.com/SciTools/iris-test-data/archive/master.zip";
    export IRIS_TEST_DATA_LOCATION="${HOME}/iris-test-data";
    mkdir ${IRIS_TEST_DATA_LOCATION};
    wget -O ${IRIS_TEST_DATA_LOCATION}/iris-test-data.zip ${IRIS_TEST_DATA_REF};
    unzip -q ${IRIS_TEST_DATA_LOCATION}/iris-test-data.zip -d ${IRIS_TEST_DATA_LOCATION};

  # Install miniconda
  # -----------------
  - >
    echo "Installing miniconda";
    export CONDA_BASE="https://repo.continuum.io/miniconda/Miniconda";
    wget --quiet ${CONDA_BASE}3-latest-Linux-x86_64.sh -O miniconda.sh;
    bash miniconda.sh -b -p ${HOME}/miniconda;
    export PATH="${HOME}/miniconda/bin:${PATH}";

  # Create the test environment
  # ---------------------------
  - >
    echo "Creating testing environment";
    conda config --set always_yes yes --set changeps1 no;
    conda config --set show_channel_urls True;
    conda config --add channels conda-forge;
    conda update --quiet conda;

  # Get environment spec.
  - >
    export ENV_NAME="iris-grib-dev";
    export ENV_FILE="requirements/ci/py${PYTHON_VERSION}.yml";

  # Optionally download latest Iris from repo,
  # and replace the Iris dependency with Iris' underlying dependencies.
  - >
    if [[ "${LIMIT_TO_RELEASED_IRIS}" == false ]]; then
      IRIS_REF="https://github.com/SciTools/iris/archive/master.zip";
      export IRIS_LOCATION="${HOME}/iris";
      mkdir ${IRIS_LOCATION};
      wget -O ${IRIS_LOCATION}/iris.zip ${IRIS_REF};
      unzip -q ${IRIS_LOCATION}/iris.zip -d ${IRIS_LOCATION};

      IRIS_ENV_FILE="${IRIS_LOCATION}/iris-master/requirements/ci/py${PYTHON_VERSION}.yml";
      sed -i "/- iris/d" ${ENV_FILE};
      echo "# IRIS DEPENDENCIES." >> ${ENV_FILE};
      sed -ne "/dependencies:/,$ p" ${IRIS_ENV_FILE} | sed "1d" >> ${ENV_FILE};
    fi;

  # Create environment.
  - >
    conda env create --quiet --file=${ENV_FILE};
    source activate ${ENV_NAME};

  # Check installation of eccodes.
  - python -m eccodes selfcheck;

  # Install pip, then coveralls.
  - conda install --quiet pip;
  - pip install coveralls;

  # Output environment debug info.
  - >
    conda list -n ${ENV_NAME};
    conda info -a;

  # Configure Iris
  # --------------
  - echo "Configuring Iris";

  # Optionally install latest Iris from downloaded source.
  - >
    if [[ "${LIMIT_TO_RELEASED_IRIS}" == false ]]; then
      cd ${IRIS_LOCATION}/iris-master;
      python setup.py --quiet install;
    fi;

  # Locate Iris installation.
  - export IRIS_DIR=$(python -c "import iris; import os.path; print(os.path.dirname(iris.__file__))")

  # Set iris config paths.
  - >
    export PREFIX="${HOME}/miniconda/envs/${ENV_NAME}";
    SITE_CFG="${IRIS_DIR}/etc/site.cfg";
    echo "[Resources]" > ${SITE_CFG};
    echo "test_data_dir = $(pwd)/iris-test-data/test_data" >> ${SITE_CFG};
    echo "doc_dir = $(pwd)/docs/iris" >> ${SITE_CFG};
    echo "[System]" >> ${SITE_CFG};
    echo "udunits2_path = ${PREFIX}/lib/libudunits2.so" >> ${SITE_CFG};

  # Install iris-grib itself
  # ------------------------
  - >
    echo "Installing Iris-grib.";
    cd ${HOME}/SciTools/iris-grib;
    pip install . --no-deps;

  # Summarise the environment
  # -------------------------
  - >
    conda list -n ${ENV_NAME};
    conda list -n ${ENV_NAME} --explicit;
    conda info -a;

script:
  # Ensure we can import iris_grib and that the tests pass
  # ------------------------------------------------------
  - coverage run setup.py test

after_success: coveralls
